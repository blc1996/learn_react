{"ast":null,"code":"import _objectSpread from \"/Users/vincentbao/Desktop/react/streams/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/vincentbao/Desktop/react/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/vincentbao/Desktop/react/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/vincentbao/Desktop/react/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/vincentbao/Desktop/react/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/vincentbao/Desktop/react/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vincentbao/Desktop/react/streams/client/src/components/streams/StreamEdit.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { editStream } from '../../actions';\nimport history from '../../history';\n\nvar StreamEdit =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamEdit, _React$Component);\n\n  function StreamEdit() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamEdit);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamEdit)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (props) {\n      console.log(_this.props);\n      var content = \"\";\n\n      if (_this.props.stream) {\n        console.log(\"inside\");\n        content = \"\".concat(props.input.name === \"title\" ? props.stream.title : props.stream.description);\n      }\n\n      var className = \"field \".concat(props.meta.error && props.meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, props.label), React.createElement(\"input\", Object.assign({}, props.input, {\n        autoComplete: \"off\",\n        value: content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      })), _this.errorHandle(props.meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      // console.log(formValues);\n      _this.props.editStream(_this.props.streamId, _objectSpread({}, formValues, {\n        userId: _this.props.userId\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamEdit, [{\n    key: \"errorHandle\",\n    value: function errorHandle(_ref) {\n      var error = _ref.error,\n          touched = _ref.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter New Title:\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter New Description:\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return StreamEdit;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title!\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description!\";\n  }\n\n  return errors;\n};\n\nvar formWrapped = reduxForm({\n  form: 'streamEdit',\n  validate: validate\n})(StreamEdit);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var id = history.location.pathname.split('/')[3];\n  return {\n    userId: state.auth.userId,\n    stream: state.streams[id],\n    streamId: id\n  };\n};\n\nexport default connect(mapStateToProps, {\n  editStream: editStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/vincentbao/Desktop/react/streams/client/src/components/streams/StreamEdit.js"],"names":["React","Field","reduxForm","connect","editStream","history","StreamEdit","renderInput","props","console","log","content","stream","input","name","title","description","className","meta","error","touched","label","errorHandle","onSubmit","formValues","streamId","userId","handleSubmit","Component","validate","errors","formWrapped","form","mapStateToProps","state","id","location","pathname","split","auth","streams"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport {editStream} from '../../actions';\nimport history from '../../history';\n\n\nclass StreamEdit extends React.Component {\n    errorHandle ({ error, touched}) {\n        if(touched && error){\n            return (\n                <div className=\"ui error message\" >\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = (props) => {\n        console.log(this.props);\n        var content = \"\";\n        if(this.props.stream){\n            console.log(\"inside\");\n            content = `${props.input.name === \"title\" ? props.stream.title : props.stream.description}`;\n        }\n        const className = `field ${props.meta.error && props.meta.touched ? 'error' : ''}`;\n        return (\n            <div className={className}>\n                <label>{props.label}</label>\n                <input {...props.input} autoComplete=\"off\" value={content} />\n                {this.errorHandle(props.meta)}\n            </div>\n        );\n    }\n\n    onSubmit = (formValues) => {\n        // console.log(formValues);\n        this.props.editStream(this.props.streamId, {...formValues, userId: this.props.userId});\n    }\n\n    render () {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\" >\n                <Field name=\"title\" component={this.renderInput} label=\"Enter New Title:\"/>\n                <Field name=\"description\" component={this.renderInput} label=\"Enter New Description:\" />\n                <button className=\"ui button primary\" >Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n    if(!formValues.title){\n        errors.title = \"You must enter a title!\"\n    }\n    if(!formValues.description){\n        errors.description = \"You must enter a description!\"\n    }\n    return errors;\n};\n\nconst formWrapped = reduxForm({\n    form: 'streamEdit',\n    validate\n})(StreamEdit);\n\nconst mapStateToProps = state => {\n    const id = history.location.pathname.split('/')[3];\n    return {\n        userId: state.auth.userId,\n        stream: state.streams[id],\n        streamId: id\n    };\n}\n\nexport default connect(mapStateToProps, {editStream})(formWrapped);"]},"metadata":{},"sourceType":"module"}